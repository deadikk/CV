<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AgeLabel" xml:space="preserve">
    <value>Age</value>
  </data>
  <data name="AttentionText" xml:space="preserve">
    <value>Attention, for all Agents.

Experimental sample of new generation of developers was disconnected.

Code name ".Net Developer 3000".

He isn't armed, but he is inventive and unpredictable that's why very dangerous.

Main info is available on your console.

For more details please follow the link:</value>
  </data>
  <data name="BasicInfoTitle" xml:space="preserve">
    <value>MAIN INFO</value>
  </data>
  <data name="CityLabel" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="CountryLabel" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="CurrentCompany" xml:space="preserve">
    <value>GlobalLogic</value>
  </data>
  <data name="CurrentCompanyLink" xml:space="preserve">
    <value>https://www.globallogic.com/ua/</value>
  </data>
  <data name="ExperienceLabel" xml:space="preserve">
    <value>Experience</value>
  </data>
  <data name="Kyiv" xml:space="preserve">
    <value>Kyiv</value>
  </data>
  <data name="LevelLabel" xml:space="preserve">
    <value>Level</value>
  </data>
  <data name="LocationLabel" xml:space="preserve">
    <value>Estimated location</value>
  </data>
  <data name="Male" xml:space="preserve">
    <value>Male</value>
  </data>
  <data name="Middle" xml:space="preserve">
    <value>Middle</value>
  </data>
  <data name="MonthsLabel" xml:space="preserve">
    <value>m</value>
  </data>
  <data name="nextPageLabel" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="SexLabel" xml:space="preserve">
    <value>Sex</value>
  </data>
  <data name="Ukraine" xml:space="preserve">
    <value>Ukraine</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="YearsLabel" xml:space="preserve">
    <value>y</value>
  </data>
  <data name="AboutPageLabel" xml:space="preserve">
    <value>ABOUT</value>
  </data>
  <data name="ContactsPageLabel" xml:space="preserve">
    <value>CONTACTS</value>
  </data>
  <data name="CVPageLabel" xml:space="preserve">
    <value>CV</value>
  </data>
  <data name="HomePageLabel" xml:space="preserve">
    <value>HOME</value>
  </data>
  <data name="AdditionalSkills" xml:space="preserve">
    <value>

 XXXAdditional information about this sample:xxx

 XXXEnhanced eruditionxxx
In addition to the data stored in the ROM about development, there are a lot of information and general knowledge in variety areas: from botany to astronomy. This improvement allows this new version to solve different problems without additional resources and expertise.

 XXXBuilt-in self-learningxxx
Observing the previous generation, it has been revealed the disadvantage that there is no desire to learn and evolve. Education data was stored in read-only mode, which led to problems with the recording of new data in the programmer. With new built-in self-learning plugin, these problems no longer occur. This copy is prone to self-directed learning and development, especially in the field of software development. The module has been tested on Microsoft Virtual Academy courses and ITVDN from Cyberbionics, which showed a high level of assimilation of information and adaptation to the received knowledge.

 XXXIncreased performance levelxxx
Due to the necessity to perform tasks in a short time and the incidence of the sudden deadlines, it has been successfully increased rate of efficiency, responsibility and commitment. As a result, it managed to achieve the possibility to activate such modes as «overtime working» and «homework night tasks» for a small compensation by cookies and coffee. Thus it was possible to achieve stable operation with 99% uptime.

 XXXImproved powerxxx
Because of activation of the self-improvement module for testing a few years ago, this model began  uncontrolled improvement in different directions, including different kinds of sports: bodybuilding, snowboarding, moto-cycling etc. At first glance, it may seems not important point, however, no one knows when it can be useful to transfer a table or a server in another room. The bonus is a biological organism, with almost invulnerable immunity, that is essential for long-term work on the project without time losing because of illness.

 XXXAppearance patchxxx
The new version of the patch is applied, banned from wearing a sweater, torn jeans and dirty boots. This fix allows the developer to take on meetings with clients or superiors.</value>
  </data>
  <data name="MainSkills" xml:space="preserve">
    <value>
 XXXThe experience gained during study and work contains following skills:xxx
- web application development using .Net MVC platform
- development of desktop applications: WinForms, WPF
- development of a database in MS Sql and Oracle
- database using inside .net applications (ORM-Lite, Entity Framework, CQRS, ADO.Net)
- web-pages development using HTML, CSS, JS, JQuery
- development and integration with SalesForce , SAP, Pace</value>
  </data>
</root>